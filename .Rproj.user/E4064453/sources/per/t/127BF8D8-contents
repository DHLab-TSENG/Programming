---
title: "3. Data Structure"
author: "Yi-Ju Tseng"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
editor: visual
---

## Common Data Structure 資料結構

::: columns
::: {.column width="50%"}
-   序列 (sequence)
    -   表 (list)
    -   定值表 (tuple)
    -   範圍 (range)
-   映射 (mapping)
    -   字典 (dist)
:::

::: {.column width="50%"}
-   矩陣 (matrix, array)
    -   一般矩陣
    -   numpy矩陣
-   資料框 (data frame)
    -   pandas 資料框
:::
:::

## Common Data Structure 資料結構

::: columns
::: {.column width="50%"}
-   **序列 (sequence)**
    -   表 (list)
    -   定值表 (tuple)
    -   範圍 (range)
-   映射 (mapping)
    -   字典 (dist)
:::

::: {.column width="50%"}
-   矩陣 (matrix, array)
    -   一般矩陣
    -   numpy矩陣
-   資料框 (data frame)
    -   pandas 資料框
:::
:::

## 表 (list)

-   使用方括號 `[ ]`宣告
-   內容以`,`分隔
-   內容的資料型態一定要相同
-   可作運算

```{python}
#| echo: true
list1 = [float1, float2, float3]
print(list1)
```

## list的運算功能

```{python}
#| echo: true
list1 = [float1, float2, float3]
print(list1)
```

`sum(`list物件名稱`)` 物件加總

```{python}
#| echo: true
sum(list1)
```

`max(`list物件名稱`)` 物件最大值

```{python}
#| echo: true
list1 = [float1, float2, float3]
max(list1)
```

可參考[文件](https://docs.python.org/zh-cn/3/library/functions.html)

## 定值表 (tuple)

-   使用小括號 `( )`宣告
-   內容以`,`分隔
-   內容的資料型態可以不同

```{python}
#| echo: true
tuple1 = (float1, float2, float3, text1, text2)
print(tuple1)
```

## 範圍 (range)

-   使用`range(數列起點,數列終點,間隔)`宣告
-   若只有輸入一個參數，視為數列終點，起點設為預設值0
-   若只有輸入兩個參數，則間隔設為預設值1
-   終點不包括在內

```{python}
#| echo: true
r1 = range(10)
r2 = range(10,20)
r3 = range(10,20,2)
print([r1,r2,r3])
```

::: columns
::: column
```{python}
#| echo: true
for i in r1:
  print(i)
```
:::

::: column
```{python}
#| echo: true
for i in r3:
  print(i)
```
:::
:::

## Common Data Structure 資料結構

::: columns
::: {.column width="50%"}
-   序列 (sequence)
    -   表 (list)
    -   定值表 (tuple)
    -   範圍 (range)
-   **映射 (mapping)**
    -   字典 (dist)
:::

::: {.column width="50%"}
-   矩陣 (matrix, array)
    -   一般矩陣
    -   numpy矩陣
-   資料框 (data frame)
    -   pandas 資料框
:::
:::

## 字典 (dist)

-   使用大括號 `{ }`宣告
-   內容為`key : value`的組合，並以`,`分隔
-   key不能重複，通常為字串

```{python}
#| echo: true
dist1 = {"id":1, "name":"Ryan", "School":"CGU"}
print(dist1)
```

## sequence 取值

-   sequence包含：list, tuple, range
-   使用中括號加上index取值`變數名稱[index]`
-   `index`從0開始

| 位置  |  1  |  2  |  3  |  4  | ... |
|:-----:|:---:|:---:|:---:|:---:|:---:|
| index |  0  |  1  |  2  |  3  | ... |

::: columns
::: {.column width="60%"}
```{python}
#| echo: true
list1 = [float1, float2, float3]
print(list1)
```

```{python}
#| echo: true
list1[0]
```
:::

::: {.column width="40%"}
```{python}
#| echo: true
r2 = range(10,20)
print(r2)
```

```{python}
#| echo: true
r2[5]
```
:::
:::

## sequence 新增修改

-   sequence包含：list, tuple, range
-   `sequence物件.append()`可新增內容至sequence中

```{python}
#| echo: true
list1 = [float1, float2, float3]
print(list1)
```

```{python}
#| echo: true
list1.append(5.5)
print(list1)
```

## mapping 取值

-   mapping包含：dist
-   使用中括號加上key取值`變數名稱[key]`

```{python}
#| echo: true
dist1 = {"id":1, "name":"Ryan", "School":"CGU"}
print(dist1)
```

## mapping 新增修改

-   mapping包含：dist
-   `mapping物件.update()`可新增內容(key:value pairs)至mapping中

```{python}
#| echo: true
dist1 = {"id":1, "name":"Ryan", "School":"CGU"}
print(dist1)
```

```{python}
#| echo: true
dist1.update({"age":25, "dept":"IM"})
print(dist1)
```

## Hands-on

-   新增一sequence `a`，包含數字1到10
-   新增一sequence `b`，包含數字1到20中的所有偶數
-   取出`a` sequence 的第*4*個值

## sequence + for

sequence結構（list, tuple, range）和mapping結構（dist）均可作為迴圈依據

`for` *變數* `in` *迴圈依據*:

`縮排` 執行內容

::: columns
::: column
```{python}
#| echo: true
print(list1)
```
:::

::: column
```{python}
#| echo: true
for i in list1:
  print(i)
```
:::
:::

依序將list結構的內容取出，設定為i，並印出來

## mapping + for

-   mapping結構（dist）預設取得部份為key
-   使用`.values()`即可取value (值)

```{python}
#| echo: true
print(dist1)
```

::: columns
::: column
```{python}
#| echo: true
for i in dist1:
  print(i)
```
:::

::: column
```{python}
#| echo: true
for i in dist1.values():
  print(i)
```
:::
:::

## Hands-on

-   新增一sequence `b`，包含數字1到20中的所有偶數

-   取出`b` sequence 的第*5,6,7*個值

-   新增一mapping `c`，內容為

```{python}
#| echo: true
dist1 = {"id":[1,2,3,4], "name":["Ryan","Tom","Emma","Amy"], "School":"CGU"}
```

-   取出`id`中的第*3*個值
-   取出`name`中的第*2*個值的第1個字元（字母）

## Common Data Structure 資料結構

::: columns
::: {.column width="50%"}
-   序列 (sequence)
    -   表 (list)
    -   定值表 (tuple)
    -   範圍 (range)
-   映射 (mapping)
    -   字典 (dist)
:::

::: {.column width="50%"}
-   **矩陣 (matrix, array)**
    -   一般矩陣
    -   numpy矩陣
-   資料框 (data frame)
    -   pandas 資料框
:::
:::

## 一般矩陣 (matrix, array)

-   可想成sequence (1維矩陣)的堆疊
-   sequence為row的組成
-   直接以中括號分隔matrix的row和column

| Col1 | Col2 | Col3 |
|:----:|:----:|:----:|
|  1   |  2   |  3   |
|  4   |  5   |  6   |

::: columns
::: column
```{python}
#| echo: true
matrix1 = [[1, 2, 3], 
          [4, 5, 6]]
print(matrix1)
```
:::

::: column
```{python}
#| echo: true
row1 = [1, 2, 3]
row2 = [4, 5, 6]
matrix2 = [row1, row2]
print(matrix2)
```
:::
:::

## numpy矩陣 - 1維

-   1維的情況下跟**List**很像，但是運算速度更快
-   可用sequence新增numpy矩陣

```{python}
#| echo: true
import numpy as np
a = np.array([0, 0.5, 1.0, 1.5, 2.0]) 
list_string = ['a', 'b', 'c']
b = np.array(list_string) 
print([a,b])
```

或是用`arrange(起點,終點,間隔)`來生成numpy矩陣，如同`range()`的用法

```{python}
#| echo: true
c = np.arange(0, 10, 2) 
print(c)
```

## numpy矩陣 - 2維

-   可用兩個sequence組合新增numpy矩陣
-   預設以row為維度堆疊

```{python}
#| echo: true
tow_d = np.array([row1,row2]) 
print(tow_d)
```

## numpy矩陣 - 取值

```{python}
#| echo: true
print(tow_d)
```

::: columns
::: column
-   使用中括號`[`index`]`取值
-   可用slice功能，`1:`為從1開始到最後，`:2`為從0開始2到2（不包括2）

```{python}
#| echo: true
print(tow_d[1:])
```

```{python}
#| echo: true
print(tow_d[:2])
```
:::

::: column
-   一個維度一個`[]`，前row後column
-   `array`\[`row`\]\[`column`\]

```{python}
#| echo: true
print(tow_d[1][2])
```
:::
:::

## numpy矩陣 - 新增修改

-   `np.concatenate(`想結合的numpy矩陣list`)`
-   一維矩陣直接往後貼

```{python}
#| echo: true
np1 = np.array([0, 0.5, 1.0, 1.5, 2.0]) 
np2 = np.array([0, 5, 10, 15, 20]) 
new_np = np.concatenate([np1, np2])
print(new_np)
```

## numpy矩陣 - 新增修改 2維

2維矩陣可決定新增方向

-   `np.row_stack([np1,np2])` 使用新增row的想法組合
-   `np.column_stack([np1,np2])` 使用新增column的想法組合

```{python}
#| echo: true
np.row_stack([np1,np2])
```

```{python}
#| echo: true
np.column_stack([np1,np2])
```

## numpy矩陣 - 計算功能

`sum()`、`mean()`、`std()`、`cumsum()`、`max()`、`min()`、`count()`

::: columns
::: column
```{python}
#| echo: true
print(a)
```

```{python}
#| echo: true
print(a.sum())
```

```{python}
#| echo: true
print(a.mean())
```

```{python}
#| echo: true
print(a.std())
```

```{python}
#| echo: true
print(a.cumsum())
```
:::

::: column
```{python}
#| echo: true
print(tow_d)
```

```{python}
#| echo: true
print(tow_d.sum()) 
```

```{python}
#| echo: true
print(tow_d.mean()) 
```

```{python}
#| echo: true
print(tow_d.std()) 
```

```{python}
#| echo: true
print(tow_d.cumsum()) 
```
:::
:::

## numpy矩陣 - 計算功能

`sum()`、`mean()`、`std()`、`cumsum()`、`max()`、`min()`、`count()`

`axis`= 0 BY COLUMN, 1 BY ROW

::: columns
::: column
```{python}
#| echo: true
print(tow_d)
```

```{python}
#| echo: true
print(tow_d.sum(axis=0))
```

```{python}
#| echo: true
print(tow_d.sum(axis=1))
```
:::

::: column
```{python}
#| echo: true
print(tow_d.mean(axis=0))
```

```{python}
#| echo: true
print(tow_d.mean(axis=1))
```
:::
:::

## Common Data Structure 資料結構

::: columns
::: {.column width="50%"}
-   序列 (sequence)
    -   表 (list)
    -   定值表 (tuple)
    -   範圍 (range)
-   映射 (mapping)
    -   字典 (dist)
:::

::: {.column width="50%"}
-   矩陣 (matrix, array)
    -   一般矩陣
    -   numpy矩陣
-   **資料框 (data frame)**
    -   pandas 資料框
:::
:::

## pandas 資料框

-   使用前須載入`import pandas as pd`
-   增加欄位名稱等資訊，並提供不少資料處理功能
-   由dict組成

```{python}
#| echo: true
import pandas as pd
df1 = pd.DataFrame({"ID":[1, 2, 3, 4],
                    "Name":["Tom","Emma","Ryan","Amy"]})
df1
```

## pandas 資料框 - 取值

資料框物件名稱.`head(資料筆數)`：取前幾筆

```{python}
#| echo: true
df1.head(2)
```

資料框物件名稱.`head(資料筆數)`：取後幾筆

```{python}
#| echo: true
df1.tail(2)
```

## pandas 資料框 - 取值 (column)

資料框物件名稱`[`欄位名稱`]`：取出sequence

```{python}
#| echo: true
df1["Name"]
```

資料框物件名稱`[[`欄位名稱`]]`：取出資料框

```{python}
#| echo: true
df1[["Name"]]
```

## pandas 資料框 - 取值 (row)

資料框物件名稱`[`row slice`]`

```{python}
#| echo: true
df1[0:1]
```

## Hands-on

-   使用Google生成式AI，請他生成一個儲存學生學號、姓名、成績的pandas資料框，並生成5筆資料
-   試著取出學生成績欄位
-   試著取出學生姓名與成績兩個欄位
-   試著取出第3位學生的成績 (hint: sequence)

## pandas 資料框 - 設定index

預設index為0\~n的序列

```{python}
#| echo: true
df_index = pd.DataFrame({"ID":[1, 2, 3, 4],
       "Name":["Tom","Emma","Ryan","Amy"]},index=["a","b","c","d"])
df_index
```

## pandas 資料框 - 設定index

也可用已有的data frame設定，透過`.set_index(欄位名稱)`

```{python}
#| echo: true
df_index2 = df1.set_index("ID")
df_index2
```

## pandas 資料框 - 新增修改

`pd`.`concat([pd物件1, pd物件2])`，預設為row方向的合併

```{python}
#| echo: true
df1 = pd.DataFrame({"ID":[1, 2, 3, 4],
                    "Name":["Tom","Emma","Ryan","Amy"]})
df2 = pd.DataFrame({"ID":[5,6,7],
                    "Name":["A","B","C"]})                 
newdf = pd.concat([df1,df2])
print(newdf)
```

## Check Data Type

使用`type()`函數可查看資料結構

```{python}
#| echo: true
type(dist1)
```

## Common Data Structure 資料結構 - Recap

::: columns
::: {.column width="50%"}
-   序列 (sequence)
    -   表 (list) `[]`
    -   定值表 (tuple) `()`
    -   範圍 (range) `range()`
-   映射 (mapping)
    -   字典 (dist) `{key:value}`
:::

::: {.column width="50%"}
-   矩陣 (matrix, array)
    -   一般矩陣
    -   numpy矩陣
-   資料框 (data frame)
    -   pandas 資料框
:::
:::
