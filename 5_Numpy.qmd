---
title: "5. NumPy"
author: "Yi-Ju Tseng"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
editor: visual
---

## NumPy

*   Basic NumPy
*   Universal Functions (UFuncs) in NumPy
*   Aggregates
*   Broadcasting

## NumPy

*   **Basic NumPy**
*   Universal Functions (UFuncs) in NumPy
*   Aggregates
*   Broadcasting

# Basic NumPy

## What is NumPy?

-   **Num**erical **Py**thon
-   the fundamental package for **numerical computation** in Python
-   high-performance multidimensional array object + tools for working with these arrays
-   foundation of other data science libraries (like Pandas, SciPy, and scikit-learn) 
-   Key feature: **ndarray**, a homogeneous n-dimensional array object.

## Why Use NumPy Arrays?

*   **Efficiency:** more compact than Python lists
*   **Speed:**  vectorized operations on NumPy arrays are much faster than iterating through Python lists. NumPy uses optimized C code under the hood
*   **Functionality:** provides a large library of mathematical functions optimized for arrays

## NumPy Getting Started

Install

```{python}
#| eval: false
#| echo: true
!pip3 install numpy
```

Import

```{python}
#| echo: true
import numpy as np
```

## Basic NumPy Array Manipulations

*   `Attributes`: Determining the size, shape, memory consumption, and data types of arrays
*   `Indexing`: Getting and setting the value of individual array elements
*   `Slicing`: Getting and setting smaller subarrays within a larger array
*   `Reshaping`: Changing the shape of a given array
*   `Joining and splitting`: Combining multiple arrays into one, and splitting one array into many

## NumPy Array Attributes

*   Every NumPy array has attributes:
    *   `ndim`: the number of dimensions
    *   `shape`: the size of each dimension
    *   `size`: the total size of the array
    *   `dtype`: the data type of the array elements
    *   `itemsize`: the size (in bytes) of each array element
    *   `nbytes`: the total size (in bytes) of the array

## NumPy Array Attributes - Examples

```{python}
#| echo: true
np.random.seed(0)  # seed for reproducibility
x1 = np.random.randint(10, size=6)  # One-dimensional array
x2 = np.random.randint(10, size=(3, 4))  # Two-dimensional array
x3 = np.random.randint(10, size=(3, 4, 5))  # Three-dimensional array
```

::::: columns
::: column
```{python}
#| echo: true
print(x1)
print("ndim: ", x1.ndim)
print("shape:", x1.shape)
print("size: ", x1.size)
print("dtype: ", x1.dtype)
print("itemsize:", x1.itemsize, "bytes")
print("nbytes: ", x1.nbytes, "bytes")
```
:::
::: column
```{python}
#| echo: true
print(x2)
print("ndim: ", x2.ndim)
print("shape:", x2.shape)
print("size: ", x2.size)
print("dtype: ", x2.dtype)
print("itemsize:", x2.itemsize, "bytes")
print("nbytes: ", x2.nbytes, "bytes")
```
:::
:::::

## NumPy Array Attributes - data type

-   NumPy arrays contain values of a single type
-   `dtype`: Assign data type when creating a numpy array
    -   Most of the time, this can be automatically detected
    -   Available data type [link](https://jakevdp.github.io/PythonDataScienceHandbook/02.01-understanding-data-types.html)

```{python}
#| echo: true
np.zeros(10, dtype=np.int16)
```

## Array Indexing - Accessing Single Elements

*   Similar to Python lists
*   In a multi-dimensional array, items can be accessed using a comma-separated tuple of indices
*   Indexing starts from 0

## Array Indexing - Example
```{python}
#| echo: true
x = np.array([[1,2,3],[4,5,6]])
print(x)
```

::::: columns
::: column
```{python}
#| echo: true
print(x[0, 0]) 
```
```{python}
#| echo: true
print(x[1, 2])  
```
:::
::: column
```{python}
#| echo: true
x[0, 0] = 12
print(x)
```
:::
:::::

## Array Slicing - Accessing Subarrays

*   Use the colon (`:`) operator to slice arrays.
*   `x[start:stop:step]`
*   If any of these are unspecified, they default to the values `start=0`, `stop=`*`size of dimension`*, `step=1`.

## Array Slicing - Example

```{python}
#| echo: true
x = np.arange(10)
x
```
`x[start:stop:step]`
```{python}
#| echo: true
print(x[1:5]) # Elements 1 to 4
print(x[:5:2]) # Every other element from beginning to index 5
print(x[::2]) # Every other element from the beginning
print(x[5:]) # Elements starting at index 5
```

## Array Slicing: Example
```{python}
#| echo: true
two_d = np.array([np.arange(5),np.arange(5)]) 
print(two_d)
```

::::: columns
::: column

```{python}
#| echo: true
print(two_d[1:])
```

```{python}
#| echo: true
print(two_d[:2])
```

```{python}
#| echo: true
print(two_d[1][2])
```
:::

::: column

```{python}
#| echo: true
print(two_d[:])
```

```{python}
#| echo: true
print(two_d[1,:])
```
```{python}
#| echo: true
print(two_d[:,1])
```

```{python}
#| echo: true
print(two_d[1,-1])
```
:::
:::::
## Reshaping of Arrays
*   The `reshape()` method gives a new shape to an array without changing its data.
```{python}
#| echo: true
x = np.arange(1, 10)
x
```
```{python}
#| echo: true
grid = x.reshape((3, 3))
print(grid)
```

## Array Concatenation and Splitting

*   `np.concatenate([array1, array2, ...])`: Concatenates arrays along an existing axis.
*   `np.vstack((array1, array2))`: Vertical stack (row-wise concatenation).
*   `np.hstack((array1, array2))`: Horizontal stack (column-wise concatenation).


## Concatenation - Example
```{python}
#| echo: true
x = np.array([1, 2, 3])
y = np.array([3, 2, 1])
z = [99, 99, 99]
print(np.concatenate([x, y, z]))
```
## Concatenation - Example
```{python}
#| echo: true
grid = np.array([[1, 2, 3],
                 [4, 5, 6]])
# concatenate along the first axis
np.concatenate([grid, grid])                 
```
```{python}
#| echo: true
# concatenate along the second axis (zero-indexed)
np.concatenate([grid, grid], axis=1)                 
```
## Concatenation - Example
```{python}
#| echo: true
x = np.array([1, 2, 3])
grid = np.array([[9, 8, 7],
                 [6, 5, 4]])

# vertically stack the arrays
np.vstack([x, grid])           
```
```{python}
#| echo: true
# horizontally stack the arrays
y = np.array([[99],
              [99]])
np.hstack([grid, y])       
```

## Splitting - Example

-   `np.split(`np array,[split points]`)` 
-   `np.vsplit(`np array,[split points]`,)` 
-   `np.hsplit(`np array,[split points]`)`  

```{python}
#| echo: true
x = [1, 2, 3, 99, 99, 3, 2, 1]
x1, x2, x3 = np.split(x, [3, 5])
print(x1, x2, x3)
```

## Splitting - Example
```{python}
#| echo: true
x = np.array([1, 2, 3])
y = np.array([3, 2, 1])
np2d = np.row_stack([x,y,x])
print(np2d)
```

-   `np.vsplit(`np array,[split points]`)` 
-   `np.hsplit(`np array,[split points]`)`  

```{python}
#| echo: true
upper, lower = np.vsplit(np2d, [2])
print(upper)
print(lower)
```


## Splitting - Example
```{python}
#| echo: true
x = np.array([1, 2, 3])
y = np.array([3, 2, 1])
np2d = np.row_stack([x,y,x])
print(np2d)
```

-   `np.vsplit(`np array,[split points]`)` 
-   `np.hsplit(`np array,[split points]`)`  

```{python}
#| echo: true
left, right = np.hsplit(np2d, [2])
print(left)
print(right)
```


## Hands-on

-   Split the array, first five scores are from class 1 and the others are from class 2
-   Which class has higher average score?
```{python}
#| echo: true
import numpy as np
scores = np.array([75, 82, 90, 65, 88, 55, 66, 77, 44, 100])
```

## NumPy

*   Basic NumPy
*   **Universal Functions (UFuncs) in NumPy**
*   Aggregates
*   Broadcasting

# Universal Functions (UFuncs) in NumPy

## Why UFuncs?

*   NumPy excels at fast computation on arrays.
*   Achieving this speed requires *vectorized* operations.
*   UFuncs (Universal Functions) are the key to vectorized operations in NumPy.
*   UFuncs allow you to apply a function element-wise to arrays, often with significant performance gains compared to Python loops.


## The Slowness of Loops

*   Python's default implementation (CPython) can be slow for repeated small operations.
*   Dynamic typing and interpreted nature lead to overhead in loops.

```{python}
#| echo: true
def compute_reciprocals(values):
    output = np.empty(len(values))
    for i in range(len(values)):
        output[i] = 1.0 / values[i]
    return output
values = np.random.randint(1, 10, size=5)
print(compute_reciprocals(values))
```

## UFuncs to the Rescue

*   NumPy's UFuncs provide a fast, vectorized alternative to loops.
*   UFuncs push the loop into NumPy's compiled layer for much faster execution.

```{python}
#| echo: true
import numpy as np
big_array = np.random.randint(1, 100, size=1000000)
#Compare the time between looping and ufuncs.
%timeit compute_reciprocals(big_array) #previous slide's method
%timeit (1.0 / big_array) #ufunc implementation
```

## UFuncs: Two Flavors

*   **Unary UFuncs:** Operate on a single input array.  Examples: `np.abs`, `np.sin`, `np.exp`.
*   **Binary UFuncs:** Operate on two input arrays. Examples: `np.add`, `np.subtract`, `np.multiply`, `np.divide`, `np.power`.

## Array Arithmetic

*   NumPy's UFuncs leverage Python's native arithmetic operators.
```{python}
#| echo: true
import numpy as np
x = np.arange(4)
print("x =", x)
print("x + 5 =", x + 5)
print("x - 5 =", x - 5)
print("x * 2 =", x * 2)
print("x / 2 =", x / 2)
print("x // 2 =", x // 2)  # Floor division
print("-x =", -x)
print("x ** 2 =", x ** 2)
print("x % 2 =", x % 2)
```


## UFunc Equivalents

| Operator | Equivalent UFunc | Description                     |
| :------- | :--------------- | :------------------------------ |
| `+`      | `np.add`         | Addition                        |
| `-`      | `np.subtract`    | Subtraction                     |
| `-`      | `np.negative`    | Unary negation                  |
| `*`      | `np.multiply`    | Multiplication                  |
| `/`      | `np.divide`      | Division                        |
| `//`     | `np.floor_divide` | Floor division                 |
| `**`     | `np.power`       | Exponentiation                  |
| `%`      | `np.mod`         | Modulus/remainder               |

## Absolute Value

*   Python's built-in `abs()` function is also supported by NumPy.
*   NumPy provides `np.absolute()` (alias `np.abs()`)
*   Works with complex numbers (returns magnitude).

```{python}
#| echo: true
import numpy as np
x = np.array([-2, -1, 0, 1, 2])
print(np.abs(x))

x = np.array([3 - 4j, 4 - 3j, 2 + 0j, 0 + 1j])
print(np.abs(x))
```

## Trigonometric Functions

*   NumPy offers a comprehensive suite of trigonometric functions:
    *   `np.sin()`, `np.cos()`, `np.tan()`
    *   `np.arcsin()`, `np.arccos()`, `np.arctan()`
```{python}
#| echo: true
import numpy as np
theta = np.linspace(0, np.pi, 3)

print("theta =", theta)
print("sin(theta) =", np.sin(theta))
print("cos(theta) =", np.cos(theta))
print("tan(theta) =", np.tan(theta))

x = [-1, 0, 1]
print("arcsin(x) =", np.arcsin(x))
print("arccos(x) =", np.arccos(x))
print("arctan(x) =", np.arctan(x))
```
    
## Exponents and Logarithms

*   Exponentials: `np.exp()`, `np.exp2()`, `np.power()`
*   Logarithms: `np.log()` (natural log), `np.log2()` (base-2), `np.log10()` (base-10)
*   Specialized versions for small inputs: `np.expm1()`, `np.log1p()`

```{python}
#| echo: true
import numpy as np
x = [1, 2, 3]
print("x =", x)
print("e^x =", np.exp(x))
print("2^x =", np.exp2(x))
print("3^x =", np.power(3, x))

x = [1, 2, 4, 10]
print("x =", x)
print("ln(x) =", np.log(x))
print("log2(x) =", np.log2(x))
print("log10(x) =", np.log10(x))

x = [0, 0.001, 0.01, 0.1]
print("exp(x) - 1 =", np.expm1(x))
print("log(1 + x) =", np.log1p(x))
```

## Specialized UFuncs

*   NumPy has many more ufuncs (hyperbolic trig, bitwise, comparisons, etc.).
*   `scipy.special` is an excellent source for more specialized mathematical functions.
*   Examples from `scipy.special`:  `gamma()`, `gammaln()`, `beta()`, `erf()`, `erfc()`, `erfinv()`

```
!pip3 install scipy
```

```{python}
#| echo: true
from scipy import special
import numpy as np

# Gamma functions and related functions
x = [1, 5, 10]
print("gamma(x) =", special.gamma(x))
print("ln|gamma(x)| =", special.gammaln(x))
print("beta(x, 2) =", special.beta(x, 2))

# Error function
x = np.array([0, 0.3, 0.7, 1.0])
print("erf(x) =", special.erf(x))
print("erfc(x) =", special.erfc(x))
print("erfinv(x) =", special.erfinv(x))

```

## Advanced UFunc Features

*   (Mention these topics briefly - can expand in presentation if desired)
*   UFunc output options (e.g., specifying an output array).
*   Aggregates (e.g., `np.add.reduce()`).
*   Outer products (e.g., `np.multiply.outer()`).

## NumPy

*   Basic NumPy
*   Universal Functions (UFuncs) in NumPy
*   **Aggregates**
*   Broadcasting

# Aggregates

# Why Aggregate?

*   Often, the first step when facing large datasets is to compute summary statistics.
*   Aggregates provide a concise way to describe the "typical" values in a dataset.
*   Examples: mean, standard deviation, sum, product, min, max, median, quantiles.
*   NumPy has fast, built-in aggregation functions optimized for arrays.


## Summing Array Values

*   Python's built-in `sum()` function:


```python
import numpy as np
L = np.random.random(100)
sum(L)
```

*   NumPy's `np.sum()` function:
```{python}
#| echo: true
import numpy as np
L = np.random.random(100)
np.sum(L)
```

## NumPy's `sum()` is Faster


# NumPy's `sum()` is Faster!

*   NumPy's `sum()` executes in compiled code, offering significant speed improvements.


```{python} 
#| echo: true
import numpy as np
big_array = np.random.rand(1000000)
%timeit sum(big_array)
%timeit np.sum(big_array)
```

## Caveat: `sum()` vs. `np.sum()`



*   `sum()` and `np.sum()` are *not* identical!
*   Optional arguments have different meanings.
*   `np.sum()` is aware of multiple array dimensions. Be aware of these differences to avoid confusion.

## Minimum and Maximum


*   Python's built-in `min()` and `max()` functions.


```{python} 
#| echo: true
import numpy as np
big_array = np.random.rand(1000000)
min(big_array), max(big_array)
```

*   NumPy's `np.min()` and `np.max()` functions.
```{python}
#| echo: true
import numpy as np
big_array = np.random.rand(1000000)
np.min(big_array), np.max(big_array)
```

## NumPy's `min()` and `max()` are Faster!

```{python}
#| echo: true
import numpy as np
big_array = np.random.rand(1000000)
%timeit min(big_array)
%timeit np.min(big_array)
```

## Shorter Syntax: Array Methods

*   For `min`, `max`, `sum`, etc., use the array object's methods:

```{python}
#| echo: true
import numpy as np
big_array = np.random.rand(1000000)
print(big_array.min(), big_array.max(), big_array.sum())
```

## Multi-Dimensional Aggregates


*   Aggregate along rows or columns in multi-dimensional arrays using the `axis` argument.


```{python}
#| echo: true
import numpy as np
M = np.random.random((3, 4))
print(M)
```

## `axis` Argument Example (Columns)


*   `axis=0`: collapses the *first* axis (columns in a 2D array).

```{python}
#| echo: true
import numpy as np
M = np.random.random((3, 4))
M.min(axis=0)  # Minimum value within each column
```

## `axis` Argument Example (Rows)

*   `axis=1`: collapses the *second* axis (rows in a 2D array).


```{python}
#| echo: true
import numpy as np
M = np.random.random((3, 4))
M.max(axis=1)  # Maximum value within each row
```

## Other Aggregation Functions



| Function Name   | NaN-safe Version | Description                                     |
| :---------------- | :--------------- | :---------------------------------------------- |
| `np.sum`          | `np.nansum`      | Compute sum of elements                       |
| `np.prod`         | `np.nanprod`     | Compute product of elements                     |
| `np.mean`         | `np.nanmean`     | Compute mean of elements                      |
| `np.std`          | `np.nanstd`      | Compute standard deviation                      |
| `np.var`          | `np.nanvar`      | Compute variance                                |
| `np.min`          | `np.nanmin`      | Find minimum value                              |
| `np.max`          | `np.nanmax`      | Find maximum value                              |
| `np.argmin`       | `np.nanargmin`    | Find index of minimum value                     |
| `np.argmax`       | `np.nanargmax`    | Find index of maximum value                     |
| `np.median`       | `np.nanmedian`    | Compute median of elements                      |
| `np.percentile`    | `np.nanpercentile` | Compute rank-based statistics of elements       |
| `np.any`          | N/A              | Evaluate whether any elements are true        |
| `np.all`          | N/A              | Evaluate whether all elements are true         |

## 前置作業

為了成功從https (加密封包傳輸)下載資料，首先取消證書驗證

```{python}
#| echo: true
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
```

```         
!pip3 install seaborn
```

## Example: President Heights


*   Uses a real-world dataset to demonstrate aggregates.

```{python}
#| echo: true
import numpy as np
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/jakevdp/PythonDataScienceHandbook/refs/heads/master/notebooks/data/president_heights.csv')
heights = np.array(data['height(cm)'])
print("Mean height: ", heights.mean())
print("Standard deviation:", heights.std())
print("Minimum height: ", heights.min())
print("Maximum height: ", heights.max())
print("25th percentile: ", np.percentile(heights, 25))
print("Median: ", np.median(heights))
print("75th percentile: ", np.percentile(heights, 75))
```

## Visualizing President Heights

*   Uses Matplotlib to create a histogram.

```{python}
#| echo: true
import matplotlib.pyplot as plt
import seaborn; seaborn.set()  # set plot style

plt.hist(heights)
plt.title('Height Distribution of US Presidents')
plt.xlabel('height (cm)')
plt.ylabel('number')
plt.plot()
```

## NumPy

*   Basic NumPy
*   Universal Functions (UFuncs) in NumPy
*   Aggregates
*   **Broadcasting**

# Broadcasting

## Vectorization and Broadcasting

*   UFuncs vectorize operations to remove slow Python loops.
*   Broadcasting extends this by enabling UFuncs to operate on arrays of different sizes.
*   Broadcasting defines how NumPy handles operations on arrays with differing shapes.



## Broadcasting: The Basic Idea

*   Binary operations on arrays of the *same* size operate element-wise.

```{python}
#| echo: true
import numpy as np
a = np.array([1])
b = np.array([2])
print(a + b)
```

*   Broadcasting allows operations on arrays of *different* sizes.

```{python}
#| echo: true
import numpy as np
a = np.array([1])
print(a + 5)
```

## Broadcasting Analogy


*   Think of broadcasting as "stretching" or "duplicating" the smaller array to match the shape of the larger array.
*   *Crucially*, this duplication doesn't actually happen in memory – it's a conceptual model. NumPy optimizes the operation.


## Broadcasting Example: Higher Dimensions

```{python}
#| echo: true
import numpy as np
M = np.ones((3, 3))
a = np.arange(3)
print(M + a)
```

*   The 1D array `a` is "broadcast" across the 2nd dimension of `M`.


## Broadcasting Example: Both Arrays


```{python}
#| echo: true
import numpy as np
a = np.arange(3)
b = np.arange(3)[:, np.newaxis]  # Reshape b to be a column vector
print(a)
print(b)
print(a + b)
```

*   Both `a` and `b` are broadcast to a common shape.


## Rules of Broadcasting

*   NumPy uses a strict set of rules to determine how to handle broadcasting.

    *   **Rule 1:** If the two arrays differ in their number of dimensions, the shape of the one with fewer dimensions is *padded* with ones on its leading (left) side.
    *   **Rule 2:** If the shape of the two arrays does not match in any dimension, the array with shape equal to 1 in that dimension is stretched to match the other shape.
    *   **Rule 3:** If in any dimension the sizes disagree and neither is equal to 1, an error is raised.


## Broadcasting Example 1

```{python}
#| echo: true
import numpy as np
M = np.ones((2, 3))
a = np.arange(3)
```

*   Shapes:
    *   `M.shape = (2, 3)`
    *   `a.shape = (3,)`

*   Rule 1: Pad `a` with ones:
    *   `M.shape -> (2, 3)`
    *   `a.shape -> (1, 3)`
*   Rule 2: Stretch the first dimension of `a`:
    *   `M.shape -> (2, 3)`
    *   `a.shape -> (2, 3)`
*   Result:  Shapes match!
```{python}
#| echo: true
print(M + a)
```

## Broadcasting Example 2


```{python}
#| echo: true
import numpy as np
a = np.arange(3).reshape((3, 1))
b = np.arange(3)
```

*   Shapes:
    *   `a.shape = (3, 1)`
    *   `b.shape = (3,)`

*   Rule 1: Pad `b` with ones:
    *   `a.shape -> (3, 1)`
    *   `b.shape -> (1, 3)`
*   Rule 2: Stretch both arrays:
    *   `a.shape -> (3, 3)`
    *   `b.shape -> (3, 3)`

*   Result: Shapes match!

```{python}
#| echo: true
print(a + b)
```

## Broadcasting Example 3: Incompatible

```{python}
#| echo: true
import numpy as np
M = np.ones((3, 2))
a = np.arange(3)
```

*   Shapes:
    *   `M.shape = (3, 2)`
    *   `a.shape = (3,)`

*   Rule 1: Pad `a` with ones:
    *   `M.shape -> (3, 2)`
    *   `a.shape -> (1, 3)`
*   Rule 2: Stretch the first dimension of `a`:
    *   `M.shape -> (3, 2)`
    *   `a.shape -> (3, 3)`

*   Rule 3: Shapes disagree, and neither dimension is 1.  **Error!**


```{python}
#| echo: true
# This will raise a ValueError:
# print(M + a)
```

## Broadcasting and UFuncs

*   Broadcasting rules apply to *any* binary UFunc.

```{python}
#| echo: true
import numpy as np
M = np.ones((3, 2))
a = np.arange(3)
#To fix the above error you can add a new axis and it will work
print(M + a[:, np.newaxis])

```


## Centering an Array

```{python}
#| echo: true
import numpy as np
X = np.random.random((10, 3))  # 10 observations, 3 features
Xmean = X.mean(0)  # Mean of each feature
X_centered = X - Xmean
print(X_centered.mean(0))  # Should be near zero
```

*   Broadcasting allows subtracting the feature means from each observation efficiently.


## Two-Dimensional Function

```{python}
#| echo: true
import numpy as np
import matplotlib.pyplot as plt

# x and y have 50 steps from 0 to 5
x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 50)[:, np.newaxis]

z = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)

plt.imshow(z, origin='lower', extent=[0, 5, 0, 5],
cmap='viridis')
plt.colorbar();
plt.show()

```

*   Broadcasting computes the function $z = f(x, y)$ across a grid.



# Boolean Arrays and Masks



##  Comparison Operators as UFuncs


*   NumPy's comparison operators (e.g., ``, `==`, `!=`, `=`) are implemented as UFuncs.
*   This means they work element-wise on arrays.
*   They return *boolean arrays*.


## Example: Comparison Operators

```{python}
#| echo: true
import numpy as np
x = np.array([1, 2, 3, 4, 5])

print(x > 3)
print(x <= 3)
print(x == 3)
print(x != 3)
```



## Rainfall Data: Create the Plot


```{python}
#| echo: true
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn; seaborn.set()  # set plot styles

# Load the data (replace with your actual path)
rainfall = pd.read_csv('https://raw.githubusercontent.com/amankharwal/Website-data/refs/heads/master/Seattle2014.csv')['PRCP'].values
inches = rainfall / 254  # 1/10mm -> inches

plt.hist(inches, 40);
plt.xlabel("Inches")
plt.ylabel("Number of Days")
plt.show()
```

## Rainfall Data: Boolean Masking



```{python}
#| echo: true
import numpy as np
import pandas as pd

# Load the data (replace with your actual path)

rainfall = pd.read_csv('https://raw.githubusercontent.com/amankharwal/Website-data/refs/heads/master/Seattle2014.csv')['PRCP'].values
inches = rainfall / 254  # 1/10mm -> inches

print("Number days without rain:      ", np.sum(inches == 0))
print("Number days with rain:         ", np.sum(inches != 0))
print("Days with more than 0.5 inches:", np.sum(inches > 0.5))
print("Rainy days with < 0.2 inches  :", np.sum((inches > 0) &
                                                (inches < 0.2)))
```


## `any()` and `all()`

*   `any()`: Are any values True?
*   `all()`: Are all values True?
*   Can be used along axes, like aggregates.


## `any()` and `all()` Examples

```{python}
#| echo: true
import numpy as np
rng = np.random.RandomState(0)
x = rng.randint(10, size=(3, 4))
print(np.any(x < 5))
print(np.all(x < 5))
print(np.any(x < 5, axis=1))
print(np.all(x < 5, axis=1))
```




## References

-   [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)

# Questions?
