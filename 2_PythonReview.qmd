---
title: "2. Python Programming Review"
author: "Yi-Ju Tseng"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
editor: visual
---

## Review: Introduction to Computer Science 計算機概論

-   **Variables, Expressions, and Statements** (PY4E Ch2)
-   **Conditional Execution** (PY4E Ch3)
-   **Functions** (PY4E Ch4)
-   **Iterations** (PY4E Ch5)

# Variables (PY4E Ch2)

## Variable Assignment

-   Use `=` to assign variables
-   Assignment Statements: **Variable name** `=` **Value** (Fix value/Constants, other variables)

![](https://miro.medium.com/v2/resize:fit:524/format:webp/0*16wn36oYFyUAsFOA.gif)

[Source](https://wakeupcoders.medium.com/the-beginners-guide-to-python-variables-896ee1a95cc7)

## Variable Assignment

```{python}
#| echo: true
var1 = "test" #Assignment statement
var2, var3 = "test2","test3"
print(var1) #Print statement
```

```{python}
#| echo: true
print(var2)
```

```{python}
#| echo: true
print(var3)
```

```{python}
#| echo: true
print(var2+var3)
```

## Variable Name Rules

-   不可使用保留字Reserved Words
    -   會變色的基本上都是保留字，如`True`, `False`等，在Python有功能的字串
-   只能由**數字**`0-9`、**字母**`A-Z` `a-z`，或是**底線**組成`_`，且不可以數字開頭
-   大小寫敏感
-   建議要是看得懂的字

```{python}
#| echo: true
True
False
```

## Data Types 資料型態

-   **文字 (text, string, character)**
-   **數值 (numeric)**
-   **布林變數 (Boolean, logic)**
-   **日期 (date)**

## 文字 (text, string, character)

-   一般文字，使用`單引號`或`雙引號`標註，或是使用`str(文字內容)`宣告
-   就算內容為數字，只要使用雙引號標注，或是`str`宣告，即為文字型態（除非有做轉型）

```{python}
#| echo: true
text1 = "abcd"
text2 = "10"
text3 = str("xyz")
text4 = str(100)
print([text1, text2, text3,text4])
```

## 數值 (numeric)

包含**整數 int**與浮點數 float等型態。

**整數 int**：正數或負數，無小數點

-   直接指定，或是使用`int(數值)`宣告整數
-   若`數值`非整數，則**無條件捨去**
-   若`數值`是文字型態，則強迫轉型

```{python}
#| echo: true
int1 = 10
int2 = int(5)
int3 = int(6.7)
int4 = int(6.3)
int5 = int("88")
print([int1, int2, int3, int4, int5])
```

## 數值 (numeric)

包含整數 int與**浮點數 float**等型態。

**浮點數 float**：正數或負數，有小數點的數值

-   直接指定，或是使用`float(數值)`宣告整數
-   若`數值`為整數，則**自動增加小數點**
-   若`數值`是文字型態，則強迫轉型

```{python}
#| echo: true
float1 = float(10)
float2 = float(6.7)
float3 = float("88.8")
print([float1, float2, float3])
```

## 布林變數 (Boolean, logic)

`True` or `False`

::::: columns
::: column
```{python}
#| echo: true
a = 1 > 2
print(a)
```
:::

::: column
```{python}
#| echo: true
b = 1 < 2
print(b)
```
:::
:::::

## 日期 (date)

Python中並無內建的日期型態，必須使用`datetime`套件，使用前要記得載入（import）

```{python}
#| echo: true
#| eval: false
!pip3 install datetime
```

```{python}
#| echo: true
import datetime
```

## 日期 (date)

當需要用載入套件的功能時，結構為：`套件名稱`.`套件功能或資料類型`（可能有多層）

如`datetime`.`datetime.now()`：

-   第一個datetime為套件名稱
-   第二個為套件內資料類型，有`date`, `time`, `datetime`等，可查閱[文件](https://docs.python.org/zh-tw/3/library/datetime.html#available-types)
-   `.now()`為更進一步的功能（取得今日的**日期物件**）

```{python}
#| echo: true
today = datetime.datetime.now()
print(today)
```

## 日期 (date)

取得日期後，**日期物件**有許多內建的功能

-   如`.year`，`.month`等
-   可查閱[文件](https://docs.python.org/zh-tw/3/library/datetime.html#available-types)

```{python}
#| echo: true
print(today)
```

```{python}
#| echo: true
print(today.year)
```

```{python}
#| echo: true
print(today.month)
```

## 日期 (date)

也可直接新增指定日期物件，使用方法為：

-   `datetime.date(年,月,日)`
-   `datetime.datetime(年,月,日,時,分,秒)`
-   時分秒不指定會直接使用預設值 (0時0分0秒)

```{python}
#| echo: true
newdate = datetime.date(2025,1,23)
print(newdate)
```

```{python}
#| echo: true
newdatetime = datetime.datetime(2025,1,23,18,45,59)
print(newdatetime)
```

```{python}
#| echo: true
newdatetime = datetime.datetime(2025,1,23)
print(newdatetime)
```

## Data Types 資料型態 - Recap

-   **文字 (text, string, character)**
-   **數值 (numeric)**
-   **布林變數 (Boolean, logic)**
-   **日期 (date)**

# Conditional Execution (PY4E Ch3)

## Operator 運算子

-   `+`加 / `-`減 / `*`乘 / `/`除
-   `>`大於 / `<`小於 / `==`等於 / `!=`不等於
-   `and`且 / `or`或

## +加 / -減 / \*乘 / /除

```{python}
#| echo: true
int1 = 10
int2 = int(5)
print([int1, int2])
```

Numeric Expressions

::::: columns
::: column
`+`加

```{python}
#| echo: true
int1 + int2
```

`-`減

```{python}
#| echo: true
int1 - int2
```
:::

::: column
`*`乘

```{python}
#| echo: true
int1 * int2
```

`/`除

```{python}
#| echo: true
int1 / int2
```
:::
:::::

## \>大於 / \<小於 / ==等於 / !=不等於

```{python}
#| echo: true
int1 = 10
int2 = int(5)
print([int1, int2])
```

::::: columns
::: column
`>`大於

```{python}
#| echo: true
int1 > int2
```

`<`小於

```{python}
#| echo: true
int1 < int2
```
:::

::: column
`==` 等於

```{python}
#| echo: true
int1 == int2
```

`!=`不等於

```{python}
#| echo: true
int1 != int2
```
:::
:::::

## and / or

::::: columns
::: column
`and`且

```{python}
#| echo: true
10>5 and 10>1
```

```{python}
#| echo: true
10>5 and 1>5
```
:::

::: column
`or`或

```{python}
#| echo: true
10>5 or 10>1
```

```{python}
#| echo: true
10>5 or 1>5
```
:::
:::::

## Hands-on

-   宣告一個**文字** "15"
-   宣告一個**數字** 10
-   試著相加看看？是否能相加？錯誤訊息的意思是什麼？

## if

::::: columns
::: {.column width="40%"}
![](figures/if.png)
:::

::: {.column width="60%"}
```{python}
#| echo: true
x = 50
if x < 60:
    print('Slow')
if x > 80:
    print('Great')

#decrease to indicate end of block
print('Learner') 
```
:::
:::::

## if & else if (elif)

::::: columns
::: column
![](figures/ifelse.png)
:::

::: column
```{python}
#| echo: true
x = 50
if x < 60:
    print('Slow')
elif x > 80:
    print('Great')

print('Learner')
```
:::
:::::

## if & if vs. if & else if (elif)

::::: columns
::: column
```{python}
#| echo: true
x = 40
if x < 50:
    print('Super Slow')
elif x < 60:
    print('Slow')

print('Learner')
```

![](figures/ifelsecomp.png){width="200"}
:::

::: column
```{python}
#| echo: true
x = 40
if x < 50:
    print('Super Slow')
if x < 60:
    print('Slow')

print('Learner')
```

![](figures/ifcomp.png){width="200"}
:::
:::::

## if & else

::::: columns
::: column
```{python}
#| echo: true
x = 4
if x > 2 :
    print('Bigger')
else :
    print('Not bigger')

print('All Done')
```
:::

::: column
```{python}
#| echo: true
x = 1
if x > 2 :
    print('Bigger')
else :
    print('Not bigger')

print('All Done')
```
:::
:::::

![](figures/else.png)

## try except

-   You surround a dangerous section of code with `try` and `except`

    -   If the code in the `try` works - the `except` is skipped

    -   If the code in the `try` fails - it jumps to the `except` section

![](figures/try.png)

## try except

::::: columns
::: column
```{python}
#| echo: true
astr = 'Bob'
try:
    print('Hello')
    istr = int(astr)
    print('There')
except:
    istr = -1

print('Done', istr)
```
:::

::: column
```{python}
#| echo: true
astr = '123'
try:
    print('Hello')
    istr = int(astr)
    print('There')
except:
    istr = -1

print('Done', istr)
```
:::
:::::

![](figures/try.png)

## Hands-on

Write a program to convert score to the grade and print the grade according to the following criteria:

-   \>90: A

-   \>80 and \<=90: B

-   \>=60 and \<=80: C

-   \<60: D

Assign 76 to variable `score`, check the output

## Conditional Execution - Recap

-   Operator 運算子
    -   `+` / `-` / `*` / `/`
    -   `>` / `<` / `==` / `!=`
    -   `and` / `or`
-   if
-   if & elif & else
-   try except

# Function (PY4E Ch4)

## Function

Stored and reused steps!

-   Built-in functions
    -   `print('123')`, `int('123')`, `input()`
-   Functions from libraries
    -   `datetime.date(2025,1,23)`, from `datetime` library
-   Self-define functions

## Function 函數使用

-   `Function_name`(`Argument`)
    -   `print`(`variable` or "value")

```{python}
#| echo: true
var1 = "test"
print(var1)
```

-   `function_name`(`Argument 1`,`Argument 2`,...)
    -   多個參數用`,`分隔

## Function Definition 設計函數

We define a function using the `def` reserved word

```{python}
#| echo: true
#| eval: false
def function_name(arguments):
  statement 1
  statement 2
  ...
```

## Function Definition 設計函數

::::: columns
::: column
```{python}
#| echo: true
def grade(score):
  if score>90:
    print("A")
  elif score>80:
    print("B")
  elif score>=60:
    print("C")
  else:
    print("D")
```
:::

::: column
```{python}
#| echo: true
this_exam = 80
grade(this_exam)
```
:::
:::::

## Function return value

::::: columns
::: column
```{python}
#| echo: true
def grade_ret(score):
  return_grade=""
  if score>90:
    return_grade="A"
  elif score>80:
    return_grade="B"
  elif score>=60:
    return_grade="C"
  else:
    return_grade="D"
  return return_grade
```
:::

::: column
```{python}
#| echo: true
this_exam = 85
r_grade = grade_ret(this_exam)
print(r_grade)
```
:::
:::::

## Hands-on

Rewrite your pay computation with time-and-a-half for overtime and create a function called `computepay` which takes two parameters ( hours and rate).

Enter Hours: 45

Enter Rate: 10

Pay: 475.0 (475 = 40 \* 10 + 5 \* 15)

## Function - Recap

-   `Function_name`(`Argument`)
-   `def` `function name`(`arguments`)`:`

```{python}
#| echo: true
#| eval: false
def function_name(arguments):
  statement 1
  statement 2
  ...
```

# Iteration (PY4E Ch5)

## Repeated Steps

-   Loops (repeated steps) have **iteration variables** that change each time through a loop.
    -   Often these **iteration variables** go through **a sequence of numbers**.

![](figures/while.png)

## while

::::: columns
::: column
```{python}
#| echo: true
n = 5
while n > 0 :
    print(n)
    n = n - 1
print('Blastoff!')
print(n)
```
:::

::: column
![](figures/while.png)
:::
:::::

## for loop

::::: columns
::: column
```{python}
#| echo: true
for i in [5, 4, 3, 2, 1]:
    print(i)
print('Blastoff!')
```
:::

::: column
![](figures/for.png)
:::
:::::

## break

The `break` statement ends the current loop and jumps to the statement immediately following the loop

::::: columns
::: {.column width="70%"}
```{python}
#| echo: true
i = 0
while i < 5:
    if i == 3:
        break
        # Exit the loop when i is 3
    print(i)
    i += 1
```
:::

::: {.column width="30%"}
`print(0)`

`print(1)`

`print(2)`

`break`!
:::
:::::

## continue

The `continue` statement ends the current iteration and jumps to the top of the loop and starts the next iteration

::::: columns
::: {.column width="70%"}
```{python}
#| echo: true
for i in range(5):
    if i == 3:
        continue  
        # Skip the rest of the code for i = 3
    print(i)
```
:::

::: {.column width="30%"}
`print(0)`

`print(1)`

`print(2)`

`continue`!

`print(4)`

`print(5)`
:::
:::::

## Hands-on

Print the following pattern

```         
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
```

## Iteration - Recap

-   while
-   for
-   break
-   continue

## References

-   [Python for Everybody](https://www.py4e.com/)
-   [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)

# Questions?

