---
title: "7. Visualization"
author: "Yi-Ju Tseng"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
editor: visual
---

# Visualization

-   Visualization with Matplotlib
-   Simple Line Plots 
-   Simple Scatter Plots 
-   Visualizing Errors 
-   Density and Contour Plots 
-   Histograms, Binnings, and Density
-   Customizing Plot Legends and Colorbars
-   Multiple Subplots 

# Visualization with Matplotlib

## What is Matplotlib?

-   Matplotlib is a multi-platform **data visualization library** for Python
-   Created by John Hunter in 2002, with version 0.1 released in 2003.
-   Large user and developer base, making it a powerful and ubiquitous tool for scientific visualization.
-   Despite newer visualization tools, Matplotlib remains a vital part of the data science stack.

## Importing Matplotlib

```{python} 
#| echo: true
# !pip3 install matplotlib
import matplotlib as mpl
import matplotlib.pyplot as plt
```

The `plt` interface is most commonly used

Load other important library
```{python} 
#| echo: true
import numpy as np
import pandas as pd
```


## Setting Plot Styles

Use `plt.style.use('style')` to set the visual style of your plots

```{python} 
#| echo: true
plt.style.use('seaborn-v0_8-whitegrid')
```

[Stylesheets](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html)


## Figure

The **figure** (an instance of the class `plt.Figure`) = container that contains all the objects representing axes, graphics, text, and labels.

`plt` is from `import matplotlib.pyplot as plt`

```{python} 
#| echo: true
fig = plt.figure()
```

## How to View Your Plots - (1/3)

-   **From a Python script:**\
    Use `plt.show()` at the end to display figures.\
    `plt` is from `import matplotlib.pyplot as plt`
-   `plt.plot(x,y)` for x and y axis
```{python} 
#| echo: true
x = np.linspace(0, 10, 100) #(start, stop, num)
fig = plt.figure() # new instance
plt.plot(x, np.sin(x)) # plot
plt.show() # display figure
```
## How to View Your Plots - (1/3)

```{python} 
x = np.linspace(0, 10, 100)
fig = plt.figure()
plt.plot(x, np.sin(x))
plt.show()
```

## How to View Your Plots - (2/3)

-   **From an IPython shell:**\
    Use `%matplotlib` magic command to enable interactive plotting.\
    `plt.show()` is not required.

## How to View Your Plots - (3/3)
-   **From a Jupyter (IPython) notebook:**\
    Use `%matplotlib inline` for static images or \
    `%matplotlib notebook` for interactive plots

```{python} 
#| echo: true
# %matplotlib inline
x = np.linspace(0, 10, 100)
plt.plot(x, np.sin(x), '-')
plt.plot(x, np.cos(x), '--');
```


## Saving Figures

Save figures using `fig.savefig()`:

```{python} 
#| echo: true
fig.savefig('my_figure.png')
```

-   File format is inferred from the file extension.
-   Supported formats include: PNG, JPG, PDF, TIFF, and more.

```{python} 
#| echo: true
fig.canvas.get_supported_filetypes()
```

## Visualization

-   Visualization with Matplotlib
-   **Simple Line Plots** 
-   Simple Scatter Plots 
-   Visualizing Errors 
-   Density and Contour Plots 
-   Histograms, Binnings, and Density
-   Customizing Plot Legends and Colorbars
-   Multiple Subplots 


# Simple Line Plots 


## Plotting a Simple Function

Plotting a sine curve with `plt.plot(x,y)`, `plt` is from `import matplotlib.pyplot as plt`

```{python} 
#| echo: true
plt.plot(x, np.sin(x))
```


## Multiple Lines in One Plot

Call `plt.plot` multiple times to overlay lines:

```{python} 
#| echo: true
plt.plot(x, np.sin(x))
plt.plot(x, np.cos(x))
```


## Customizing Line Color
`plt.plot()` with `color` parameter
```{python} 
#| echo: true
plt.plot(x, np.sin(x - 0), color='blue')        # by name
plt.plot(x, np.sin(x - 1), color='g')           # short code (r, g, b, c, m, y, k)
plt.plot(x, np.sin(x - 2), color='0.75')        # grayscale
plt.plot(x, np.sin(x - 3), color='#FFDD44')     # hex code
plt.plot(x, np.sin(x - 4), color=(1.0,0.2,0.3)) # RGB tuple
plt.plot(x, np.sin(x - 5), color='chartreuse')  # HTML color name
```

## Customizing Line Style
`plt.plot()` with `linestyle` parameter
```{python} 
#| echo: true
plt.plot(x, x + 0, linestyle='solid')
plt.plot(x, x + 1, linestyle='dashed')
plt.plot(x, x + 2, linestyle='dashdot')
plt.plot(x, x + 3, linestyle='dotted')
# Short codes:
plt.plot(x, x + 4, linestyle='-')   # solid
plt.plot(x, x + 5, linestyle='--')  # dashed
plt.plot(x, x + 6, linestyle='-.')  # dashdot
plt.plot(x, x + 7, linestyle=':')   # dotted
```

## Customizing Line Color and Style

```{python} 
#| echo: true
plt.plot(x, x + 0, '-g')  # solid green
plt.plot(x, x + 1, '--c') # dashed cyan
plt.plot(x, x + 2, '-.k') # dashdot black
plt.plot(x, x + 3, ':r')  # dotted red
```


## Adjusting Axes Limits

`plt.axis([xmin, xmax, ymin, ymax])`, limits are arranged into a list

```{python} 
#| echo: true
plt.axis([-1, 11, -1.5, 1.5]) 
```


## Adding Titles, Labels, and Legends

`plt.title()`, `plt.xlabel()`, `plt.ylabel()`

```{python} 
#| echo: true
plt.plot(x, np.sin(x))
plt.title("A Sine Curve")
plt.xlabel("x")
plt.ylabel("sin(x)")
```

## Adding Titles, Labels, and Legends

Add a legend for multiple lines with `plt.plot()` + `label` parameter and call `plt.legend()`

```{python} 
#| echo: true
plt.plot(x, np.sin(x), '-g', label='sin(x)')
plt.plot(x, np.cos(x), ':b', label='cos(x)')
plt.legend()
```

## Hands-on - Line Plot
Setting:

1. Load library
```{python}
#| echo: true
import matplotlib
import matplotlib.pyplot as plt
```
2. 中文問題....
```{python}
#| echo: true
#| eval: false
# colab顯示繁體中文 問題：matplotlib繪圖，會發生中文無法顯示的問題
# 先下載台北黑體字型
!gdown '1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_' --output TaipeiSansTCBeta-Regular.ttf
```
```{python}
#| echo: true
# 新增字體
matplotlib.font_manager.fontManager.addfont('TaipeiSansTCBeta-Regular.ttf')
# 將 font-family 設為 Taipei Sans TC Beta
# 設定完後，之後的圖表都可以顯示中文了
matplotlib.rc('font', family='Taipei Sans TC Beta')
```

## Hands-on - Line Plot
Data: 空氣品質監測日平均值(一般污染物)
```{python}
#| echo: true
#| eval: false
# https://data.moenv.gov.tw/dataset/detail/AQX_P_19
# https://drive.google.com/drive/folders/1OrMlB4hP8nnW_0bYwoHRO6DRXWNk1qvy?usp=sharing
!gdown '1P3qrYrynZhXDC13dVo5KhDXmld5OGZz1' --output 202310.csv
!gdown '1P1Kv1ZmPOYyi83DJKUIPoksM31vJJiS5' --output 202311.csv
!gdown '1P0mojOXgvVbXImnRTPQemm7dCkLDLKAC' --output 202312.csv
!gdown '1OwAf366l-iItXV4foJemw5QdMuD3JgMc' --output 202401.csv
```
## Hands-on - Line Plot
Data
```{python}
#| echo: true
df202401 = pd.read_csv('202401.csv') 
df202312 = pd.read_csv('202312.csv') 
df202311 = pd.read_csv('202311.csv') 
df202310 = pd.read_csv('202310.csv') 
df_air = pd.concat([df202401,df202312,df202311,df202310],axis=0)
print(df_air.head())
```

## Hands-on - Line Plot
Data Clean: Remove the quotes of column headers
```{python}
#| echo: true
new_headers = []
for header in df_air.columns: # data.columns is your list of headers
    header = header.strip('"') # Remove the quotes off each header
    new_headers.append(header) # Save the new strings without the quotes
df_air.columns = new_headers # Replace the old headers with the new list
print(df_air.head())
```

## Hands-on - Line Plot
Data Clean: Data type

```{python}
#| echo: true
df_air['concentration'].dtypes
```
```{python}
#| echo: true
df_air['concentration'][0:5]
```
`pd.to_numeric(List or Series, errors={‘ignore’, ‘raise’, ‘coerce’})`
```{python}
#| echo: true
df_air['concentration'] = pd.to_numeric(df_air['concentration'], 
                                        errors="coerce")
```

```{python}
#| echo: true
df_air['concentration'].dtypes
```

## Hands-on - Line Plot
Data Clean: Data type
```{python}
#| echo: true
df_air['monitordate'].dtypes
```
`pd.to_datetime(List or Series, errors={‘ignore’, ‘raise’, ‘coerce’},format=)`
```{python}
#| echo: true
# Parse String To DateTime
df_air['DateTime']=pd.to_datetime(df_air['monitordate'],
                              format='%Y-%m-%d')
```

```{python}
#| echo: true
df_air.dtypes
```

## Hands-on - Line Plot

請試著呈現林口測站在2024/1/1\~2024/1/15的PM2.5濃度

Hint: 

-   Subset, Boolean masking
-   `pd.to_datetime(List or Series, errors={‘ignore’, ‘raise’, ‘coerce’},format=)`
-   `df.sort_values(by=column)` (`df` can be any DataFrame)
```{python}
pm25 = df_air[df_air['itemengname']=="PM2.5"]
pm25Linkou = pm25[pm25['sitename']=="林口"]
pm25Linkou2024 = pm25Linkou[(pm25Linkou['DateTime']>=pd.to_datetime("2024-01-01")) & (pm25Linkou['DateTime']<=pd.to_datetime("2024-01-15"))]
pm25Linkou2024 = pm25Linkou2024.sort_values(by="DateTime")
print(pm25Linkou2024)
```
## Hands-on - Line Plot

請試著呈現林口測站在2024/1/1\~2024/1/15的PM2.5濃度，要呈現figure legend，也要呈現x y 軸的名字

Ref:
```{python}
plt.plot(pm25Linkou2024['DateTime'], pm25Linkou2024['concentration'],label="林口")
plt.legend()
plt.xlabel("Date")
plt.ylabel("PM2.5")
plt.show()
```
## Line Plot - Seaborn

`sns.lineplot(x,y)`, x and y are data for each axis

```{python}
#| echo: true
import seaborn as sns
sns.lineplot(x=pm25Linkou2024['DateTime'], 
              y=pm25Linkou2024['concentration'])
```

## Line Plot - Seaborn

`sns.lineplot(data, x, y)`, x and y are column names for each axis

```{python}
#| echo: true
sns.lineplot(data = pm25Linkou2024, x='DateTime', y='concentration')
```

# Simple Scatter Plots 

## What is a Scatter Plot?

-   A **scatter plot** displays individual data points as dots, circles, or other shapes, rather than connecting them with lines.
-   Useful for visualizing the relationship between two or more variables.


## Scatter Plots with `plt.plot()`

`plt.plot(x,y,marker,color)`, `marker` for shapes, `color` for color

```{python} 
#| echo: true
x = np.linspace(0, 10, 30)
y = np.sin(x)
plt.plot(x, y, 'o', color='black')
```

## Scatter Plots - marker shape
`'o'`, `'.'`, `','`, `'x'`, `'+'`, `'v'`, `'^'`, `''`, `'s'`, `'d'` ...
```{python} 
#| echo: true
rng = np.random.RandomState(0)
for marker in ['o', '.', ',', 'x', '+', 'v', '^', '', 's', 'd']:
    plt.plot(rng.rand(5), rng.rand(5), marker, label=f"marker='{marker}'")
plt.legend()
```

## Line styles and marker shape

Combine marker and line styles for more complex plots

```{python} 
#| echo: true
plt.plot(x, y, '-ok') # solid, circle, black
```

## Line styles and marker shape

Customize markers and lines with additional arguments

```{python} 
#| echo: true
plt.plot(x, y, '-p', color='gray', # solid, pentagon
         markersize=15, linewidth=4,
         markerfacecolor='white',
         markeredgecolor='gray',
         markeredgewidth=2)
```


## Scatter Plots with `plt.scatter`

`plt.scatter(x, y)` allowing individual control over each point's **size**, **color**, and other properties.

```{python}
#| echo: true
plt.scatter(x, y, marker='o')
```

## Varying color and size - Bubble chart
Data:
```{python} 
#| echo: true
rng = np.random.RandomState(0)
x = rng.randn(100)
y = rng.randn(100)
colors = rng.rand(100)
sizes = 1000 * rng.rand(100)
```

Parameters:

-   `c`: color for each point
-   `s` size
-   `alpha` transparency
-   `cmap` colormap (more details later)

## with varying color and size - Bubble chart
```{python} 
#| echo: true
plt.scatter(x, y, c=colors, s=sizes, alpha=0.3, cmap='viridis')
plt.colorbar()  # Show color scale
```

## Visualizing Multidimensional Data

Iris dataset, visualizing four features at once.

Data:
```{python} 
#| echo: true
# !pip3 install scikit-learn
from sklearn.datasets import load_iris
iris = load_iris()
features = iris.data.T
print(features)
```

## Visualizing Multidimensional Data
x/y positions, size, and color all encode different data dimensions.
```{python} 
#| echo: true
plt.scatter(features[0], features[1], alpha=0.2,
            s=100*features[3], c=iris.target, cmap='viridis')
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
```
## Visualizing Multidimensional Data

```{python} 
plt.scatter(features[0], features[1], alpha=0.2,
            s=100*features[3], c=iris.target, cmap='viridis')
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
```

## `plot` vs. `scatter`: Efficiency Note

-   For small datasets, both `plt.plot` and `plt.scatter` work well.
-   For large datasets (thousands of points or more), `plt.plot` is more efficient because all points are rendered with the same style.
-   `plt.scatter` is less efficient for large datasets since it allows per-point customization and must render each point individually.

## Hands-on - Scatter Plot
試著看看空氣污染資料中，NO2濃度與SO2濃度有沒有相關？

Hint: multiple records on the same date - `df.groupby()`

Ref:
```{python}
air_mean = df_air.groupby(['DateTime', 'sitename', 'itemengname']).concentration.mean().to_frame()
air_wide = air_mean.unstack()
fig = plt.figure()
plt.plot(air_wide["concentration","NO2"],air_wide["concentration","SO2"],marker='o', linestyle='')
plt.show()
```

## Hands-on - Scatter Plot

使用泡泡圖呈現NO2與SO2的關係，並用風速（WIND_SPEED）當作泡泡大小，觀察這些資料是否有相關

```{python}
fig = plt.figure()
plt.scatter(air_wide["concentration","NO2"],air_wide["concentration","SO2"], alpha=0.2,
            s = 80*air_wide["concentration","WIND_SPEED"],marker='o')
plt.show()
```

# Visualizing Errors

## Why Show Error Bars?

-   Error bars represent the uncertainty or variability in your data.
-   They help communicate the reliability and precision of measurements.
-   For example, reporting a measurement as $$74 \pm 5$$ is much more informative than just 74


## Basic Error Bars with `plt.errorbar`

`plt.errorbar(x, y, yerr=error size, fmt = style)`: add error bars to your plots

-   `yerr` specifies the **vertical** error bar size
-   `fmt` controls the marker and line style (same as in `plt.plot`)

Data:
```{python} 
#| echo: true
x = np.linspace(0, 10, 50) #(start,end,num)
dy = 0.8
y = np.sin(x) + dy * np.random.randn(50)
```

## Basic Error Bars with `plt.errorbar`
Plot: `plt.errorbar(x, y, yerr=error size, fmt = style)`
```{python} 
#| echo: true
plt.errorbar(x, y, yerr=dy, fmt='.k')
plt.show()
```


## Customizing Error Bars

You can adjust the appearance for clarity, especially in crowded plots in `plt.errorbar()`:

-   `ecolor`: color of the error bars
-   `elinewidth`: width of error bar lines
-   `capsize`: size of the error bar caps

## Customizing Error Bars

```{python} 
#| echo: true
plt.errorbar(
    x, y, yerr=dy, fmt='o', color='black',
    ecolor='lightgray', elinewidth=3, capsize=0
)
plt.show()
```


## Horizontal and One-Sided Error Bars

Add **horizontal** error bars using `xerr` in `plt.errorbar()`

```{python} 
#| echo: true
plt.errorbar(x, y, xerr=0.5, fmt='o')
```


## Summary: Common Error Bar Options

| Parameter    | Description                            |
|--------------|----------------------------------------|
| `yerr`       | Vertical error bar sizes               |
| `xerr`       | Horizontal error bar sizes             |
| `fmt`        | Format string for marker/line style    |
| `ecolor`     | Color of error bars                    |
| `elinewidth` | Line width of error bars               |
| `capsize`    | Size of caps at the ends of error bars |


## Key Takeaways

-   Use error bars to show uncertainty in your data.
-   `plt.errorbar` is flexible and customizable for both simple and advanced needs.
-   See the [Matplotlib documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.errorbar.html) for more options.

# Density and Contour Plots 

## Introduction

-   **Density** and **contour** plots are useful for visualizing three-dimensional data in two dimensions using contours (lines) or color-coded regions.
-   Matplotlib provides three main functions for this purpose:
    -   `plt.contour()` for contour lines
    -   `plt.contourf()` for filled contours
    -   `plt.imshow()` for displaying images



## Creating a Contour Plot

-   Contour plots require a function $$ z = f(x, y) $$ evaluated on a grid.
-   Use `np.meshgrid` to create the grid:

```{python} 
#| echo: true
def f(x, y):
    return np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)
x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 40)
X, Y = np.meshgrid(x, y)
Z = f(X, Y)
print(Z)
```

##  Basic contour plot

`plt.contour(X, Y, Z, colors)`

```{python} 
#| echo: true
plt.contour(X, Y, Z, colors='black')
```

Negative values are dashed lines, positive values are solid lines



## Color-Coded Contour Plot

-   `cmap`: to specify a colormap
-   set the number of contour levels `20`

```{python} 
#| echo: true
plt.contour(X, Y, Z, 20, cmap='RdGy')
```


## Filled Contour Plot

-   `plt.contourf()` for **filled** contours
-   add a colorbar `plt.colorbar()` for reference:

```{python} 
#| echo: true
plt.contourf(X, Y, Z, 20, cmap='RdGy')
plt.colorbar()
```


## Displaying Data as an Image

-   `plt.imshow` to display the grid as an image
    -   does not accept x and y grids; set `extent` manually.
    -   The default origin for `imshow` is the upper left; set `origin='lower'` for consistency with contour plots.

```{python} 
#| echo: true
plt.imshow(Z, extent=[0, 5, 0, 5], origin='lower', cmap='RdGy')
plt.colorbar()
```

## Combining Contour and Image Plots

Overlay contours on an image for richer visualization: `plt.clabel()`- label contour lines

```{python} 
#| echo: true
contours = plt.contour(X, Y, Z, 3, colors='black')
plt.clabel(contours, inline=True, fontsize=8)
plt.imshow(Z, extent=[0, 5, 0, 5], origin='lower', cmap='RdGy', alpha=0.5)
plt.colorbar()
```



## Summary Table: Key Functions

| Function       | Description                     |
|----------------|---------------------------------|
| `plt.contour`  | Draws contour lines             |
| `plt.contourf` | Draws filled contours           |
| `plt.imshow`   | Displays a 2D array as an image |
| `plt.colorbar` | Adds a colorbar to the plot     |
| `plt.clabel`   | Adds labels to contour lines    |


# Histograms, Binnings, and Density

## What is a Histogram?

-   Graphical representation of the **distribution** of numerical data.
-   It divides data into bins (intervals) and shows the frequency (count) of data points in each bin.
-   Useful as a first step in understanding a dataset.


## Creating a Simple Histogram

`plt.hist(data)` displays the distribution of `data` in default bins
```{python} 
#| echo: true
data = np.random.randn(1000)
plt.hist(data)
plt.show()
```

## Customizing Histograms

Options to control calculation and display:

-   `bins`: Number of bins
-   `alpha`: Transparency
-   `histtype`: Type of histogram (e.g., `'stepfilled'`)
-   `color`, `edgecolor`: Color settings

```{python} 
#| echo: true
plt.hist(data, bins=30, alpha=0.5,
         histtype='stepfilled', color='steelblue',
         edgecolor='none')
plt.show()
```

## Customizing Histograms

```{python} 
#| echo: true
plt.hist(data, bins=30, alpha=0.5,
         histtype='stepfilled', color='steelblue',
         edgecolor='none')
plt.show()
```


## Comparing Multiple Distributions

Overlay several histograms using transparency for comparison.

Data:
```{python} 
#| echo: true
x1 = np.random.normal(0, 0.8, 1000)
x2 = np.random.normal(-2, 1, 1000)
x3 = np.random.normal(3, 2, 1000)
```

## Comparing Multiple Distributions
Use `dict(parameters)` to set parameters
```{python} 
#| echo: true
kwargs = dict(histtype='stepfilled', alpha=0.3, bins=40)
plt.hist(x1, **kwargs)
plt.hist(x2, **kwargs)
plt.hist(x3, **kwargs)
plt.show()
```



## Two-Dimensional Histograms

`plt.hist2d(x, y)`

Data
```{python} 
#| echo: true
mean = [0, 0]
cov = [[1, 1], [1, 2]]
x, y = np.random.multivariate_normal(mean, cov, 10000).T
```

Figure
```{python} 
#| echo: true
plt.hist2d(x, y, bins=30, cmap='Blues')
cb = plt.colorbar()
cb.set_label('counts in bin')
plt.show()
```

## Two-Dimensional Histograms
```{python} 
plt.hist2d(x, y, bins=30, cmap='Blues')
cb = plt.colorbar()
cb.set_label('counts in bin')
plt.show()
```

## Hexagonal Binning

`plt.hexbin(x,y)` use hexagons for 2D binning

```{python} 
#| echo: true
plt.hexbin(x, y, gridsize=30, cmap='Blues')
cb = plt.colorbar(label='count in bin')
plt.show()
```



## Summary: Histogram and Binning

| Function                   | Description                                |
|----------------------------|--------------------------------------------|
| `plt.hist`                 | 1D histogram plot                          |
| `plt.hist2d`               | 2D histogram plot                          |
| `plt.hexbin`               | 2D hexagonal bin plot                      |

## Hands-on - Histogram

看看新竹與前鎮一氧化碳(CO)的資料分布是否有差異（疊在一張圖中）

```{python}
CO = df_air[df_air['itemengname']=="CO"]
x1 = CO[CO['sitename']=="新竹"]["concentration"]
x2 = CO[CO['sitename']=="前鎮"]["concentration"]
kwargs = dict(histtype='stepfilled', alpha=0.3, bins=40)
plt.hist(x1, **kwargs, label = "新竹")
plt.hist(x2, **kwargs, label = "前鎮")
plt.legend()
plt.show()
```

# Customizing Plot Legends and Colorbars


## Creating a Simple Legend

-   Legends assign meaning to plot elements, making visualizations clearer and more informative.
-   The simplest way to add a legend is with `plt.legend()`.
-   Any plot element with a `label` will appear in the legend.

## Creating a Simple Legend

```{python} 
#| echo: true
x = np.linspace(0, 10, 1000)
fig = plt.figure()
plt.plot(x, np.sin(x), '-b', label='Sine')
plt.plot(x, np.cos(x), '--r', label='Cosine')
plt.axis('equal')
plt.legend()
```

-   By default, all labeled elements are included in the legend


## Customizing Legend Placement and Appearance

-   **Location:** Control legend placement with the `loc` parameter (e.g., `'upper left'`, `'lower center'`).
-   **Frame:** Remove the legend box with `frameon=False`.
-   **Columns:** Use `ncol` to arrange legend entries in multiple columns.
-   **Aesthetics:** Customize with options like `fancybox`, `shadow`, `framealpha`, and `borderpad`.

## Legend Placement and Appearance
For more options, see the `plt.legend` docstring.
```{python} 
#| echo: true
plt.plot(x, np.cos(x), '--r', label='Cosine')
plt.legend(loc='upper left', frameon=False)
```

## Legend Placement and Appearance

```{python} 
#| echo: true
plt.plot(x, np.cos(x), '--r', label='Cosine')
plt.plot(x, np.sin(x), '-b', label='Sine')
plt.legend(frameon=False, loc='lower center', ncol=2)
```


## Choosing Elements for the Legend

To control which elements appear, pass specific plot objects and labels to `legend()`

```{python} 
#| echo: true
y = np.sin(x[:, np.newaxis] + np.pi * np.arange(0, 2, 0.5))
lines = plt.plot(x, y)
plt.legend(lines[:2], ['first', 'second'])
```

## Choosing Elements for the Legend

Or only `label` the elements you want in the legend

```{python} 
#| echo: true
plt.plot(x, y[:, 0], label='first')
plt.plot(x, y[:, 1], label='second')
plt.plot(x, y[:, 2:])
plt.legend(framealpha=1, frameon=True)
```


## Key Points

-   Use `label` in plotting commands and call `legend()` to create legends.
-   Customize legends with location, columns, frame, and more.
-   Control legend entries by labeling only desired elements or passing specific objects.


## Why Use Colorbars?

-   Provide a key for interpreting the meaning of colors in plots
-   While legends are for discrete labels, colorbars are essential for continuous labels

## Creating a Basic Colorbar
Data:
```{python} 
#| echo: true
x = np.linspace(0, 10, 1000)
I = np.sin(x) * np.cos(x[:, np.newaxis])
print(I)
```
## Creating a Basic Colorbar

Add `plt.colorbar()` after using color mapping:

```{python} 
#| echo: true
plt.imshow(I)
plt.colorbar()
```
## Customizing Colormaps

Specify a colormap with the `cmap` argument (check `plt.cm` namespace (e.g., `plt.cm.viridis`, `plt.cm.RdBu`))

```{python} 
#| echo: true
plt.imshow(I, cmap='gray')
```

## Types of Colormaps

-   **Sequential colormaps**: One continuous color sequence (e.g., `binary`, `viridis`).
-   **Divergent colormaps**: Two contrasting colors for positive/negative deviations (e.g., `RdBu`, `PuOr`).
-   **Qualitative colormaps**: No particular sequence, for categorical data (e.g., `rainbow`, `jet`).


## Setting Color Limits and Extensions

-   Manually set color limits with `plt.clim()` (to focus on a specific data range)
-   Indicate out-of-bounds values using the `extend` in `plt.colorbar()`

```{python} 
#| echo: true
plt.imshow(I, cmap='RdBu')
plt.colorbar(extend='both')
plt.clim(-1, 1)
```

## Setting Color Limits and Extensions
```{python} 
plt.imshow(I, cmap='RdBu')
plt.colorbar(extend='both')
plt.clim(-1, 1)
```
## Discrete Colorbars

Represent discrete values: `plt.cm.get_cmap()` with number of bins

```{python} 
#| echo: true
plt.imshow(I, cmap=plt.cm.get_cmap('Blues', 6))
plt.colorbar()
plt.clim(-1, 1)
```

## Key Points

-   Use colorbars for continuous data and choose colormaps thoughtfully for clarity and accessibility.
-   Customize colorbars with colormap selection, color limits, extensions, and discrete bins.
-   Always consider how your color choices will appear in grayscale or to colorblind viewers.

# Multiple Subplots 


## Why Use Multiple Subplots?

-   Comparing data side by side is often helpful for analysis and presentation.
-   Matplotlib allows you to arrange multiple smaller plots (subplots) within a single figure.
-   There are 3 Ways to Create Subplots

## 1. **Manual Placement with** `plt.axes`

Create axes anywhere in the figure by specifying `[left, bottom, width, height]` in figure coordinates (0 to 1).

```{python} 
#| echo: true
ax1 = plt.axes()  # Standard axes
ax2 = plt.axes([0.65, 0.65, 0.2, 0.2])  # Inset axes at top-right
```

## 2. **Simple Grids with** `plt.subplot` 

Create a grid of subplots by specifying rows, columns, and plot index (starts at 1, goes left-to-right, top-to-bottom).
`plt.subplot(row, col, plot index)`
```{python} 
#| echo: true
for i in range(1, 7):
    plt.subplot(2, 3, i)
    plt.text(0.5, 0.5, str((2, 3, i)), fontsize=18, ha='center')
```


## 3. **Flexible Layouts with** `plt.GridSpec`

For more complex arrangements
```{python} 
#| echo: true
grid = plt.GridSpec(2, 3, wspace=0.4, hspace=0.3)
plt.subplot(grid[0, 0])
plt.subplot(grid[0, 1:])
plt.subplot(grid[1, :2])
plt.subplot(grid[1, 2])
```


## Summary Table

| Method         | Use Case                               | Access Pattern    |
|--------------------|----------------------------------|-------------------|
| `plt.axes`     | Manual, precise placement              | Variable names    |
| `plt.subplot`  | Simple grid, small number of subplots  | Index (1-based)   |
| `plt.GridSpec` | Complex, flexible layouts              | Slicing, subplots |



