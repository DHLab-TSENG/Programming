#| echo: true
import pandas as pd
import duckdb
# 記得改成自己的資料路徑
file_path = "STOCK_TW_XTAI_2330.csv"
#| echo: true
import pandas as pd
import duckdb
# 記得改成自己的資料路徑
file_path = "STOCK_TW_XTAI_2330.csv"
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"CREATE TABLE TSMC_stock AS SELECT * FROM read_csv_auto('{file_path}')")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
df_duckdb
#| echo: true
Query = '''
SELECT MONTH(Date) AS Month, AVG(Open) as avg_price, COUNT(Open) AS count
FROM df_duckdb
GROUP BY Month
ORDER BY avg_price DESC
'''
df_duckdb2 = duckdb.query(Query).to_df()
df_duckdb2
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"CREATE TABLE TSMC_stock AS SELECT COLUMNS(c -> REPLACE(c::VARCHAR, ',', '')) FROM read_csv_auto('{file_path}')")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
df_duckdb
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"CREATE TABLE TSMC_stock AS SELECT COLUMNS(c -> REPLACE(c::VARCHAR, ',', '')) FROM read_csv_auto('{file_path}')")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
df_duckdb
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"CREATE TABLE TSMC_stock AS SELECT COLUMNS(c -> REPLACE(c::VARCHAR, ',', '')) FROM read_csv_auto('{file_path}')")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
df_duckdb
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"CREATE TABLE TSMC_stock AS SELECT COLUMNS(c -> REPLACE(c::VARCHAR, ',', '')) FROM read_csv_auto('{file_path}')")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
#df_duckdb
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"CREATE TABLE TSMC_stock AS SELECT Date, COLUMNS(c -> REPLACE(c::VARCHAR, ',', '')) FROM read_csv_auto('{file_path}')")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
#df_duckdb
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"CREATE TABLE TSMC_stock AS SELECT Date, COLUMNS(c -> REPLACE(c::VARCHAR, ',', '')) EXCLUDE (Date) FROM read_csv_auto('{file_path}')")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
#df_duckdb
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"""
CREATE TABLE TSMC_stock AS
SELECT
Date,  -- Keep the Date column unchanged
CAST(REPLACE(Open, ',', '') AS DOUBLE) AS Open,
CAST(REPLACE(High, ',', '') AS DOUBLE) AS High,
CAST(REPLACE(Low, ',', '') AS DOUBLE) AS Low,
CAST(REPLACE(Close, ',', '') AS DOUBLE) AS Close,
CAST(REPLACE(Volume, ',', '') AS BIGINT) AS Volume
FROM read_csv_auto('{file_path}')
""")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
#df_duckdb
#| echo: true
# 開始連線到 DuckDB
conn = duckdb.connect(database=':memory:')
# 將 CSV 文件讀進 DuckDB 中
conn.execute(f"""
CREATE TABLE TSMC_stock AS
SELECT
Date,  -- Keep the Date column unchanged
CAST(REPLACE(Open, ',', '') AS DOUBLE) AS Open,
CAST(REPLACE(High, ',', '') AS DOUBLE) AS High,
CAST(REPLACE(Low, ',', '') AS DOUBLE) AS Low,
CAST(REPLACE(Close, ',', '') AS DOUBLE) AS Close,
CAST(REPLACE(Volume, ',', '') AS BIGINT) AS Volume
FROM read_csv_auto('{file_path}')
""")
# 將 DuckDB 用 Pandas DataFrame 讀取
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
# 結束連線到 DuckDB
conn.close()
# 顯示 DataFrame
df_duckdb
#| echo: true
Query = '''
SELECT MONTH(Date) AS Month, AVG(Open) as avg_price, COUNT(Open) AS count
FROM df_duckdb
GROUP BY Month
ORDER BY avg_price DESC
'''
df_duckdb2 = duckdb.query(Query).to_df()
df_duckdb2
#| echo: true
Query = '''
SELECT FORMAT(date_column, 'yyyy-MM') as Year_month, AVG(Open) as avg_price, COUNT(Open) AS count
FROM df_duckdb
GROUP BY Year_month
ORDER BY avg_price DESC
'''
df_duckdb2 = duckdb.query(Query).to_df()
df_duckdb2
#| echo: true
Query = '''
SELECT FORMAT(Date, 'yyyy-MM') as Year_month, AVG(Open) as avg_price, COUNT(Open) AS count
FROM df_duckdb
GROUP BY Year_month
ORDER BY avg_price DESC
'''
df_duckdb2 = duckdb.query(Query).to_df()
df_duckdb2
#| echo: true
Query = '''
SELECT FORMAT(Date, 'yyyy-MM') as Year_month, AVG(Open) as avg_price, COUNT(Open) AS count
FROM df_duckdb
GROUP BY Year_month
ORDER BY avg_price DESC
'''
df_duckdb2 = duckdb.query(Query).to_df()
df_duckdb2
#| echo: true
Query = '''
SELECT YEAR(Date) AS Year, MONTH(Date) AS Month, AVG(Open) as avg_price, COUNT(Open) AS count
FROM df_duckdb
GROUP BY Year, Month
ORDER BY avg_price DESC
'''
df_duckdb2 = duckdb.query(Query).to_df()
df_duckdb2
#| echo: true
conn = duckdb.connect(database=':memory:')
conn.execute(f"""
CREATE TABLE TSMC_stock AS
SELECT * FROM read_csv_auto('{file_path}')
""")
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
conn.close()
#| echo: true
conn = duckdb.connect(database=':memory:')
conn.execute(f"""
CREATE TABLE TSMC_stock AS
SELECT * FROM read_csv_auto('{file_path}')
""")
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
conn.close()
df_duckdb
#| echo: true
conn = duckdb.connect(database=':memory:')
conn.execute(f"""
CREATE TABLE TSMC_stock AS
SELECT *
FROM read_csv_auto('{file_path}')
""")
#| echo: true
df_duckdb = conn.execute("SELECT * FROM TSMC_stock").fetchdf()
conn.close()
df_duckdb
#| echo: true
import sqlite3
dbfile = "chinook.db"
conn = sqlite3.connect(dbfile)
rows = conn.execute("select * from artists;")
conn.close()
#| echo: true
for row in rows:
for field in row:
print("{}\t".format(field), end="")
print()
#| echo: true
import sqlite3
dbfile = "chinook.db"
conn = sqlite3.connect(dbfile)
rows = conn.execute("select * from artists;")
#| echo: true
for row in rows:
for field in row:
print("{}\t".format(field), end="")
print()
conn.close()
#| echo: true
rows
conn.close()
#| echo: true
import sqlite3
dbfile = "chinook.db"
conn = sqlite3.connect(dbfile)
rows = conn.execute("select * from artists;")
#| echo: true
rows
conn.close()
#| echo: true
import sqlite3
dbfile = "chinook.db"
conn = sqlite3.connect(dbfile)
df = pd.read_sql_query("select * from artists", conn)
#| echo: true
df
conn.close()
#| echo: true
import sqlite3
import pandas as pd
dbfile = "chinook.db"
conn = sqlite3.connect(dbfile)
df = pd.read_sql_query("select * from artists", conn)
#| echo: true
df
conn.close()
#| echo: true
import sqlite3
import pandas as pd
dbfile = "chinook.db"
conn = sqlite3.connect(dbfile)
df = pd.read_sql_query("select * from artists", conn)
conn.close()
#| echo: true
df
#| echo: true
np.random.seed(0)  # seed for reproducibility
x1 = np.random.randint(10, size=6)  # One-dimensional array
x2 = np.random.randint(10, size=(3, 4))  # Two-dimensional array
x3 = np.random.randint(10, size=(3, 4, 5))  # Three-dimensional array
#| echo: true
import numpy as np
#| echo: true
np.random.seed(0)  # seed for reproducibility
x1 = np.random.randint(10, size=6)  # One-dimensional array
x2 = np.random.randint(10, size=(3, 4))  # Two-dimensional array
x3 = np.random.randint(10, size=(3, 4, 5))  # Three-dimensional array
#| echo: true
print("x ndim: ", x1.ndim)
print("x shape:", x1.shape)
print("x size: ", x1.size)
print("x dtype: ", x1.dtype)
print("x itemsize:", x1.itemsize, "bytes")
print("x nbytes: ", x1.nbytes, "bytes")
#| echo: true
print("x ndim: ", x1.ndim)
print("x shape:", x1.shape)
print("x size: ", x1.size)
print("x dtype: ", x1.dtype)
print("x itemsize:", x1.itemsize, "bytes")
print("x nbytes: ", x1.nbytes, "bytes")
#| echo: true
print("x ndim: ", x2.ndim)
print("x shape:", x2.shape)
print("x size: ", x2.size)
print("x dtype: ", x2.dtype)
print("x itemsize:", x2.itemsize, "bytes")
print("x nbytes: ", x2.nbytes, "bytes")
#| echo: true
np.random.seed(0)  # seed for reproducibility
x1 = np.random.randint(10, size=6)  # One-dimensional array
x2 = np.random.randint(10, size=(3, 4))  # Two-dimensional array
x3 = np.random.randint(10, size=(3, 4, 5))  # Three-dimensional array
#| echo: true
print(x1)
print("x ndim: ", x1.ndim)
print("x shape:", x1.shape)
print("x size: ", x1.size)
print("x dtype: ", x1.dtype)
print("x itemsize:", x1.itemsize, "bytes")
print("x nbytes: ", x1.nbytes, "bytes")
#| echo: true
x = np.array([[1,2,3],[4,5,6]])
print(x)
#| echo: true
print(x[0, 0])
#| echo: true
print(x[1, 2])
#| echo: true
x[0, 0] = 12 #You can also modify items in place
print(x)
#| echo: true
two_d = np.array([row1,row2])
print(two_d)
